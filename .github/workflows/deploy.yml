name: Deploy to EC2 with Docker

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'admin/**'
      - 'docker-compose.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'admin/**'
      - 'docker-compose.yml'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    # Create a deployment package with only the necessary folders
    - name: Create deployment package
      run: |
        mkdir -p deployment
        cp -r frontend backend admin docker-compose.yml deployment/
        tar -czf deployment.tar.gz -C deployment .

    # Deploy to EC2
    - name: Deploy to EC2
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        source: "deployment.tar.gz"
        target: "~"

    # Setup and run on EC2
    - name: Setup and run on EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Create app directory
          mkdir -p ~/app
          
          # Extract the deployment package
          echo "Extracting deployment package..."
          tar -xzf ~/deployment.tar.gz -C ~/app
          rm ~/deployment.tar.gz
          
          # Create environment files
          echo "Creating environment files..."
          cat > ~/app/backend/.env << EOL
          # Email Configuration
          EMAIL_HOST=${{ secrets.EMAIL_HOST }}
          EMAIL_PORT=${{ secrets.EMAIL_PORT }}
          EMAIL_SECURE=${{ secrets.EMAIL_SECURE }}
          EMAIL_USER=${{ secrets.EMAIL_USER }}
          EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}
          EMAIL_FROM=${{ secrets.EMAIL_FROM }}
          
          # Frontend URL for email links
          FRONT_END_API=${{ secrets.FRONT_END_API }}
          
          # Database and Authentication
          MONGODB_URI=${{ secrets.MONGODB_URI }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_EXPIRE=${{ secrets.JWT_EXPIRE }}
          
          # Cloudinary Configuration
          CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}
          CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}
          
          # Node environment
          NODE_ENV=production
          EOL
          
          cat > ~/app/frontend/.env << EOL
          REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }}
          FRONT_END_API=${{ secrets.FRONT_END_API }}
          EOL
          
          cat > ~/app/admin/.env << EOL
          REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }}
          EOL
          
          # Build and start Docker containers
          echo "Building and starting Docker containers..."
          cd ~/app
          sudo docker-compose down || true
          sudo docker-compose build --no-cache
          sudo docker-compose up -d
